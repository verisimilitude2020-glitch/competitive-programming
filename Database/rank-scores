Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+---------+
| score | Rank    |
+-------+---------+
| 4.00  | 1       |
| 4.00  | 1       |
| 3.85  | 2       |
| 3.65  | 3       |
| 3.65  | 3       |
| 3.50  | 4       |
+-------+---------+
Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example `Rank`.

===>

select scr.Score, (select COUNT(distinct(scr2.Score)) from Scores scr2 where scr2.Score >= scr.Score) AS `Rank` 
FROM Scores  scr
ORDER BY `Rank`

We pick up one score. Inner query tries to find the count for all scores which are greater than or equal to this score. This becomes the rank of that score. For example: there are two rows with
score as 4.00. We take distinct and this makes the count to 1.